/*
    This file is part of the iText (R) project.
    Copyright (c) 1998-2025 Apryse Group NV
    Authors: Apryse Software.

    This program is offered under a commercial and under the AGPL license.
    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.

    AGPL licensing:
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
ï»¿// <auto-generated/>
#if NETSTANDARD2_0

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace iText.Commons.Utils
{
    public partial class ComplexStructureContext
    {
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::System.Collections.Generic.IDictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>>? _IDictionaryStringChildInComplexStructure;
        
        /// <summary>
        /// Defines the source generated JSON serialization contract metadata for a given type.
        /// </summary>
        #nullable disable annotations // Marking the property type as nullable-oblivious.
        public global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::System.Collections.Generic.IDictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>> IDictionaryStringChildInComplexStructure
        #nullable enable annotations
        {
            get => _IDictionaryStringChildInComplexStructure ??= (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::System.Collections.Generic.IDictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>>)Options.GetTypeInfo(typeof(global::System.Collections.Generic.IDictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>));
        }
        
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::System.Collections.Generic.IDictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>> Create_IDictionaryStringChildInComplexStructure(global::System.Text.Json.JsonSerializerOptions options)
        {
            if (!TryGetTypeInfoForRuntimeCustomConverter<global::System.Collections.Generic.IDictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>>(options, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::System.Collections.Generic.IDictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>> jsonTypeInfo))
            {
                var info = new global::System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues<global::System.Collections.Generic.IDictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>>
                {
                    ObjectCreator = () => new global::System.Collections.Generic.Dictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>(),
                    SerializeHandler = IDictionaryStringChildInComplexStructureSerializeHandler
                };
                
                jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIDictionaryInfo<global::System.Collections.Generic.IDictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>, string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>(options, info);
                jsonTypeInfo.NumberHandling = null;
            }
        
            jsonTypeInfo.OriginatingResolver = this;
            return jsonTypeInfo;
        }

        // Intentionally not a static method because we create a delegate to it. Invoking delegates to instance
        // methods is almost as fast as virtual calls. Static methods need to go through a shuffle thunk.
        private void IDictionaryStringChildInComplexStructureSerializeHandler(global::System.Text.Json.Utf8JsonWriter writer, global::System.Collections.Generic.IDictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>? value)
        {
            if (value is null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();

            foreach (global::System.Collections.Generic.KeyValuePair<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure> entry in value)
            {
                writer.WritePropertyName(entry.Key);
                ChildInComplexStructureSerializeHandler(writer, entry.Value);
            }

            writer.WriteEndObject();
        }
    }
}
#endif