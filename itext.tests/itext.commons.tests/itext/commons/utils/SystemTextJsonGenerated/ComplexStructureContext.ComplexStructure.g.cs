/*
    This file is part of the iText (R) project.
    Copyright (c) 1998-2025 Apryse Group NV
    Authors: Apryse Software.

    This program is offered under a commercial and under the AGPL license.
    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.

    AGPL licensing:
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
ï»¿// <auto-generated/>
#if NETSTANDARD2_0

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace iText.Commons.Utils
{
    public partial class ComplexStructureContext
    {
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.ComplexStructure>? _ComplexStructure;
        
        /// <summary>
        /// Defines the source generated JSON serialization contract metadata for a given type.
        /// </summary>
        #nullable disable annotations // Marking the property type as nullable-oblivious.
        public global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.ComplexStructure> ComplexStructure
        #nullable enable annotations
        {
            get => _ComplexStructure ??= (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.ComplexStructure>)Options.GetTypeInfo(typeof(global::iText.Commons.Utils.JsonUtilTest.ComplexStructure));
        }
        
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.ComplexStructure> Create_ComplexStructure(global::System.Text.Json.JsonSerializerOptions options)
        {
            if (!TryGetTypeInfoForRuntimeCustomConverter<global::iText.Commons.Utils.JsonUtilTest.ComplexStructure>(options, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.ComplexStructure> jsonTypeInfo))
            {
                var objectInfo = new global::System.Text.Json.Serialization.Metadata.JsonObjectInfoValues<global::iText.Commons.Utils.JsonUtilTest.ComplexStructure>
                {
                    ObjectCreator = () => new global::iText.Commons.Utils.JsonUtilTest.ComplexStructure(),
                    ObjectWithParameterizedConstructorCreator = null,
                    PropertyMetadataInitializer = _ => ComplexStructurePropInit(options),
                    ConstructorParameterMetadataInitializer = null,
                    ConstructorAttributeProviderFactory =  () => typeof(global::iText.Commons.Utils.JsonUtilTest.ComplexStructure).GetConstructor(InstanceMemberBindingFlags, binder: null, global::System.Array.Empty<global::System.Type>(), modifiers: null),
                    SerializeHandler = ComplexStructureSerializeHandler,
                };
                
                jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateObjectInfo<global::iText.Commons.Utils.JsonUtilTest.ComplexStructure>(options, objectInfo);
                jsonTypeInfo.NumberHandling = null;
            }
        
            jsonTypeInfo.OriginatingResolver = this;
            return jsonTypeInfo;
        }

        private static global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[] ComplexStructurePropInit(global::System.Text.Json.JsonSerializerOptions options)
        {
            var properties = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[3];

            var info0 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.Collections.Generic.IDictionary<string, int?>>
            {
                IsProperty = false,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::iText.Commons.Utils.JsonUtilTest.ComplexStructure),
                Converter = null,
                Getter =  obj => ((global::iText.Commons.Utils.JsonUtilTest.ComplexStructure)obj).map,
                Setter =  (obj, value) => ((global::iText.Commons.Utils.JsonUtilTest.ComplexStructure)obj).map = value!,
                IgnoreCondition = null,
                HasJsonInclude = true,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "map",
                JsonPropertyName = null,
                AttributeProviderFactory =  () => typeof(global::iText.Commons.Utils.JsonUtilTest.ComplexStructure).GetField("map", InstanceMemberBindingFlags),
            };
            
            properties[0] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.Collections.Generic.IDictionary<string, int?>>(options, info0);

            var info1 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
            {
                IsProperty = false,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::iText.Commons.Utils.JsonUtilTest.ComplexStructure),
                Converter = null,
                Getter =  obj => ((global::iText.Commons.Utils.JsonUtilTest.ComplexStructure)obj).str,
                Setter =  (obj, value) => ((global::iText.Commons.Utils.JsonUtilTest.ComplexStructure)obj).str = value!,
                IgnoreCondition = null,
                HasJsonInclude = true,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "str",
                JsonPropertyName = null,
                AttributeProviderFactory =  () => typeof(global::iText.Commons.Utils.JsonUtilTest.ComplexStructure).GetField("str", InstanceMemberBindingFlags),
            };
            
            properties[1] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info1);

            var info2 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.Collections.Generic.IDictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>>
            {
                IsProperty = false,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::iText.Commons.Utils.JsonUtilTest.ComplexStructure),
                Converter = null,
                Getter =  obj => ((global::iText.Commons.Utils.JsonUtilTest.ComplexStructure)obj).childsMap,
                Setter =  (obj, value) => ((global::iText.Commons.Utils.JsonUtilTest.ComplexStructure)obj).childsMap = value!,
                IgnoreCondition = null,
                HasJsonInclude = true,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "childsMap",
                JsonPropertyName = null,
                AttributeProviderFactory =  () => typeof(global::iText.Commons.Utils.JsonUtilTest.ComplexStructure).GetField("childsMap", InstanceMemberBindingFlags),
            };
            
            properties[2] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.Collections.Generic.IDictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>>(options, info2);

            return properties;
        }

        // Intentionally not a static method because we create a delegate to it. Invoking delegates to instance
        // methods is almost as fast as virtual calls. Static methods need to go through a shuffle thunk.
        private void ComplexStructureSerializeHandler(global::System.Text.Json.Utf8JsonWriter writer, global::iText.Commons.Utils.JsonUtilTest.ComplexStructure? value)
        {
            if (value is null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();

            writer.WritePropertyName(PropName_map);
            IDictionaryStringNullableInt32SerializeHandler(writer, ((global::iText.Commons.Utils.JsonUtilTest.ComplexStructure)value).map);
            writer.WriteString(PropName_str, ((global::iText.Commons.Utils.JsonUtilTest.ComplexStructure)value).str);
            writer.WritePropertyName(PropName_childsMap);
            IDictionaryStringChildInComplexStructureSerializeHandler(writer, ((global::iText.Commons.Utils.JsonUtilTest.ComplexStructure)value).childsMap);

            writer.WriteEndObject();
        }
    }
}
#endif