/*
    This file is part of the iText (R) project.
    Copyright (c) 1998-2025 Apryse Group NV
    Authors: Apryse Software.

    This program is offered under a commercial and under the AGPL license.
    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.

    AGPL licensing:
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
ï»¿// <auto-generated/>
#if NETSTANDARD2_0

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace iText.Commons.Utils
{
    public partial class ClassWithDefaultValueContext
    {
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue>? _ClassWithDefaultValue;
        
        /// <summary>
        /// Defines the source generated JSON serialization contract metadata for a given type.
        /// </summary>
        #nullable disable annotations // Marking the property type as nullable-oblivious.
        public global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue> ClassWithDefaultValue
        #nullable enable annotations
        {
            get => _ClassWithDefaultValue ??= (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue>)Options.GetTypeInfo(typeof(global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue));
        }
        
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue> Create_ClassWithDefaultValue(global::System.Text.Json.JsonSerializerOptions options)
        {
            if (!TryGetTypeInfoForRuntimeCustomConverter<global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue>(options, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue> jsonTypeInfo))
            {
                var objectInfo = new global::System.Text.Json.Serialization.Metadata.JsonObjectInfoValues<global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue>
                {
                    ObjectCreator = null,
                    ObjectWithParameterizedConstructorCreator = args => new global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue((string)args[0], (int?)args[1], (double?)args[2]),
                    PropertyMetadataInitializer = _ => ClassWithDefaultValuePropInit(options),
                    ConstructorParameterMetadataInitializer = ClassWithDefaultValueCtorParamInit,
                    ConstructorAttributeProviderFactory = () => typeof(global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue).GetConstructor(InstanceMemberBindingFlags, binder: null, new[] {typeof(string), typeof(int?), typeof(double?)}, modifiers: null),
                    SerializeHandler = ClassWithDefaultValueSerializeHandler,
                };
                
                jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateObjectInfo<global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue>(options, objectInfo);
                jsonTypeInfo.NumberHandling = null;
            }
        
            jsonTypeInfo.OriginatingResolver = this;
            return jsonTypeInfo;
        }

        private static global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[] ClassWithDefaultValuePropInit(global::System.Text.Json.JsonSerializerOptions options)
        {
            var properties = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[3];

            var info0 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
            {
                IsProperty = false,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue),
                Converter = null,
                Getter =  obj => ((global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue)obj).firstString,
                Setter =  (obj, value) => ((global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue)obj).firstString = value!,
                IgnoreCondition = null,
                HasJsonInclude = true,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "firstString",
                JsonPropertyName = null,
                AttributeProviderFactory =  () => typeof(global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue).GetField("firstString", InstanceMemberBindingFlags),
            };
            
            properties[0] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info0);

            var info1 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<int?>
            {
                IsProperty = false,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue),
                Converter = null,
                Getter =  obj => ((global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue)obj).integer,
                Setter =  (obj, value) => ((global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue)obj).integer = value!,
                IgnoreCondition = null,
                HasJsonInclude = true,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "integer",
                JsonPropertyName = null,
                AttributeProviderFactory =  () => typeof(global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue).GetField("integer", InstanceMemberBindingFlags),
            };
            
            properties[1] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<int?>(options, info1);

            var info2 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<double?>
            {
                IsProperty = false,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue),
                Converter = null,
                Getter =  obj => ((global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue)obj).doubleValue,
                Setter =  (obj, value) => ((global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue)obj).doubleValue = value!,
                IgnoreCondition = null,
                HasJsonInclude = true,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "doubleValue",
                JsonPropertyName = null,
                AttributeProviderFactory =  () => typeof(global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue).GetField("doubleValue", InstanceMemberBindingFlags),
            };
            
            properties[2] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<double?>(options, info2);

            return properties;
        }

        // Intentionally not a static method because we create a delegate to it. Invoking delegates to instance
        // methods is almost as fast as virtual calls. Static methods need to go through a shuffle thunk.
        private void ClassWithDefaultValueSerializeHandler(global::System.Text.Json.Utf8JsonWriter writer, global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue? value)
        {
            if (value is null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();

            writer.WriteString(PropName_firstString, ((global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue)value).firstString);
            writer.WritePropertyName(PropName_integer);
            global::System.Text.Json.JsonSerializer.Serialize(writer, ((global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue)value).integer, NullableInt32);
            writer.WritePropertyName(PropName_doubleValue);
            global::System.Text.Json.JsonSerializer.Serialize(writer, ((global::iText.Commons.Utils.JsonUtilTest.ClassWithDefaultValue)value).doubleValue, NullableDouble);

            writer.WriteEndObject();
        }

        private static global::System.Text.Json.Serialization.Metadata.JsonParameterInfoValues[] ClassWithDefaultValueCtorParamInit() => new global::System.Text.Json.Serialization.Metadata.JsonParameterInfoValues[]
        {
            new()
            {
                Name = "firstString",
                ParameterType = typeof(string),
                Position = 0,
                HasDefaultValue = false,
                DefaultValue = null,
                IsNullable = true,
            },

            new()
            {
                Name = "integer",
                ParameterType = typeof(int?),
                Position = 1,
                HasDefaultValue = false,
                DefaultValue = null,
                IsNullable = true,
            },

            new()
            {
                Name = "doubleValue",
                ParameterType = typeof(double?),
                Position = 2,
                HasDefaultValue = false,
                DefaultValue = null,
                IsNullable = true,
            },
        };
    }
}
#endif
